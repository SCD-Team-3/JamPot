package application;

import java.lang.IllegalArgumentException;

public class MotionPattern {
	private static final byte[] SINEWAVE = intToByteArray(new int[] {
		0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95,0x98,0x9c,0x9f,0xa2,0xa5,0xa8,0xab,0xae,
		0xb0,0xb3,0xb6,0xb9,0xbc,0xbf,0xc1,0xc4,0xc7,0xc9,0xcc,0xce,0xd1,0xd3,0xd5,0xd8,
		0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xed,0xef,0xf0,0xf2,0xf3,0xf5,
		0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfc,0xfd,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,
		0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xfe,0xfd,0xfc,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7,
		0xf6,0xf5,0xf3,0xf2,0xf0,0xef,0xed,0xec,0xea,0xe8,0xe6,0xe4,0xe2,0xe0,0xde,0xdc,
		0xda,0xd8,0xd5,0xd3,0xd1,0xce,0xcc,0xc9,0xc7,0xc4,0xc1,0xbf,0xbc,0xb9,0xb6,0xb3,
		0xb0,0xae,0xab,0xa8,0xa5,0xa2,0x9f,0x9c,0x98,0x95,0x92,0x8f,0x8c,0x89,0x86,0x83,
		0x80,0x7c,0x79,0x76,0x73,0x70,0x6d,0x6a,0x67,0x63,0x60,0x5d,0x5a,0x57,0x54,0x51,
		0x4f,0x4c,0x49,0x46,0x43,0x40,0x3e,0x3b,0x38,0x36,0x33,0x31,0x2e,0x2c,0x2a,0x27,
		0x25,0x23,0x21,0x1f,0x1d,0x1b,0x19,0x17,0x15,0x13,0x12,0x10,0x0f,0x0d,0x0c,0x0a,
		0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x03,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x06,0x07,0x08,
		0x09,0x0a,0x0c,0x0d,0x0f,0x10,0x12,0x13,0x15,0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23,
		0x25,0x27,0x2a,0x2c,0x2e,0x31,0x33,0x36,0x38,0x3b,0x3e,0x40,0x43,0x46,0x49,0x4c,
		0x4f,0x51,0x54,0x57,0x5a,0x5d,0x60,0x63,0x67,0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c});

	// A(t) = sin(t)
	// B(t) = 0.5sin(t-180)
	// C(t) = 0.5sin(t-180)
	public static final MotionPattern LINE_A = new MotionPattern(scaleArray(getSineWaveShifted(0), 1),
																 scaleArray(getSineWaveShifted(180), 0.5), 
																 scaleArray(getSineWaveShifted(180), 0.5),
																 (short) 100, (short) 1);

	// A(t) = 0.5sin(t-180)
	// B(t) = sin(t)
	// C(t) = 0.5sin(t-180)
	public static final MotionPattern LINE_B = new MotionPattern(scaleArray(getSineWaveShifted(180), 0.5),
																 scaleArray(getSineWaveShifted(0), 1),
																 scaleArray(getSineWaveShifted(180), 0.5),
																 (short) 100, (short) 1);

	// A(t) = 0.5sin(t-180)
	// B(t) = 0.5sin(t-180)
	// C(t) = sin(t)
	public static final MotionPattern LINE_C = new MotionPattern(scaleArray(getSineWaveShifted(180), 0.5),
																 scaleArray(getSineWaveShifted(180), 0.5),
																 scaleArray(getSineWaveShifted(0), 1),
																 (short) 100, (short) 1);
	public static final MotionPattern CIRCLE = new MotionPattern(scaleArray(getSineWaveShifted(), ),
																 scaleArray(getSineWaveShifted(), ),
																 scaleArray(getSineWaveShifted(), ),
																 (short) 100, (short) 1);

	private static final int TYPE_LEN = 1;
	private static final int SIZE_LEN = 2;
	private static final int DEL_LEN = 1;
	private static final int SHORT_LEN = 1;
	private static final byte MSG_TYPE = 1;
	private static final byte FREQ_TYPE = 2;
	private static final byte AMP_TYPE = 3;
	private static final byte DEL = (byte) 0xAA;
	private short length;
	private byte[] piezoStackA;
	private byte[] piezoStackB;
	private byte[] piezoStackC;
	private short frequency;
	private short amplitude;

	public MotionPattern() {
		length = 0;
		piezoStackA = null;
		piezoStackB = null;
		piezoStackC = null;
		frequency = 0;
		amplitude = 0;
	}

	public MotionPattern(byte[] arrayA, byte[] arrayB, byte[] arrayC, short freq, short amp) {
		if (arrayA.length != arrayB.length || arrayA.length != arrayC.length)
			throw new IllegalArgumentException("Mismatching array lengths");

		this.piezoStackA = arrayA;
		this.piezoStackB = arrayB;
		this.piezoStackC = arrayC;
		this.frequency = freq;
		this.amplitude = amp;
		this.length = arrayA.length;
	}
	
	public void setLength(short length) {
		this.length = length;
		piezoStackA = new byte[length];
		piezoStackB = new byte[length];
		piezoStackC = new byte[length];
	}
	
	public void setPiezoStackA(byte[] array) {
		if (array.length != length)
			throw new InvalidArgumentException("Array length does not match set length");

		for (int i = 0; i < length; i++)
			piezoStackA[i] = array[i];
	}
	
	public void setPiezoStackB(byte[] array) {
		if (array.length != length)
			throw new InvalidArgumentException("Array length does not match set length");

		for (int i = 0; i < length; i++)
			piezoStackB[i] = array[i];
	}
	
	public void setPiezoStackC(byte[] array) {
		if (array.length != length)
			throw new InvalidArgumentException("Array length does not match set length");

		for (int i = 0; i < length; i++)
			piezoStackC[i] = array[i];
	}
	
	public void setFrequency(short freq) {
		this.frequency = freq;
	}
	
	public void setAmplitude(short amp) {
		this.amplitude = amp;
	}
	
	public byte[] getAmplitudeMessage() {
		byte[] msg = new byte[TYPE_LEN + SHORT_LEN];
		int msgIndex = 0;
		
		msg[msgIndex++] = AMP_TYPE;
		for (byte b : bytize(amplitude, SHORT_LEN))
			msg[msgIndex++] = b;
		
		return msg;
	}
	
	public byte[] getFrequencyMessage() {
		byte[] msg = new byte[TYPE_LEN + SHORT_LEN];
		int msgIndex = 0;
		
		msg[msgIndex++] = FREQ_TYPE;
		for (byte b : bytize(frequency, SHORT_LEN))
			msg[msgIndex++] = b;
		
		return msg;
	}
	
	public byte[] getPatternMessage() {
		byte[] msg = new byte[TYPE_LEN + SIZE_LEN +
		                      length + DEL_LEN +
		                      length + DEL_LEN +
		                      length + DEL_LEN];
		int msgIndex = 0;
		
		msg[msgIndex++] = MSG_TYPE;
		for (byte b : bytize(length, SIZE_LEN))
			msg[msgIndex++] = b;
		for (byte b : piezoStackA)
			msg[msgIndex++] = b;
		msg[msgIndex++] = DEL;
		for (byte b : piezoStackB)
			msg[msgIndex++] = b;
		msg[msgIndex++] = DEL;
		for (byte b : piezoStackC)
			msg[msgIndex++] = b;
		msg[msgIndex++] = DEL;
		
		return msg;
	}
	
	private static byte extractByte(int value, int index) {
		int bitShift = index * 8;
		int mask = ((1 << 8) - 1) << bitShift;
		return (byte) ((mask | value) >> bitShift);
	}
	
	private static byte[] bytize(int value, int size) {
		byte[] bytes = new byte[size];
		for (int i = 0; i < size; i++)
			bytes[0] = extractByte(value, i);
		return bytes;
	}

	private static byte[] getSineWaveShifted(double degreeShift) {
		byte[] newWave = new byte[SINEWAVE.length];

		// Normalizes the phase shift to a positive number less than the whole
		// Converts the phase shift from degrees to an array index
		short indexShift = (short) (((degreeShift % 360.0) / 360.0) * SINEWAVE.length);

		// Fills in the first n values in the new wave with the last n values of
		// the reference wave, where n = indexShift.
		for (short i = 0; i < indexShift; i++)
			newWave[i] = SINEWAVE[SINEWAVE.length - indexShift + i];

		// Fills in the last m values in the new wave with the first m values of
		// the reference wave, where m = SINEWAVE_LENGTH - indexShift
		for (short i = indexShift; i < SINEWAVE.length; i++)
			newWave[i] = SINEWAVE[i - indexShift];

		return newWave;
	}

	private static byte[] scaleArray(byte[] array, double factor) {
		for (int i = 0; i < array.length; i++)
			array[i] = (byte) (((((double) array[i]) - 128) * factor) + 128);

		return array;
	}
	
	private static byte[] intToByteArray(int[] array) {
		byte[] newArray = new byte[array.length];
		
		for (int i = 0; i < array.length; i++)
			newArray[i] = (byte) array[i];
		
		return newArray;
	}
}
