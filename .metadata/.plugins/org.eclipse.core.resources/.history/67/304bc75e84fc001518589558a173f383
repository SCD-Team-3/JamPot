package application;

public class MotionPattern {
	private static final int TYPE_LEN = 1;
	private static final int SIZE_LEN = 2;
	private static final int DEL_LEN = 1;
	private static final int SHORT_LEN = 1;
	private static final byte MSG_TYPE = 1;
	private static final byte FREQ_TYPE = 2;
	private static final byte AMP_TYPE = 3;
	private static final byte DEL = (byte) 0xAA;
	private short length;
	private byte[] piezoStackA;
	private byte[] piezoStackB;
	private byte[] piezoStackC;
	private short frequency;
	private short amplitude;

	public MotionPattern() {
		length = 0;
		piezoStackA = null;
		piezoStackB = null;
		piezoStackC = null;
		frequency = 0;
		amplitude = 0;
	}
	
	public void setLength(short length) {
		
	}
	
	public void setFrequency(short freq) {
		this.frequency = freq;
	}
	
	public void setAmplitude(short amp) {
		this.amplitude = amp;
	}
	
	public byte[] getAmplitudeMessage() {
		byte[] msg = new byte[TYPE_LEN + SHORT_LEN];
		int msgIndex = 0;
		
		msg[msgIndex++] = AMP_TYPE;
		for (byte b : bytize(amplitude, SHORT_LEN))
			msg[msgIndex++] = b;
		
		return msg;
	}
	
	public byte[] getFrequencyMessage() {
		byte[] msg = new byte[TYPE_LEN + SHORT_LEN];
		int msgIndex = 0;
		
		msg[msgIndex++] = FREQ_TYPE;
		for (byte b : bytize(frequency, SHORT_LEN))
			msg[msgIndex++] = b;
		
		return msg;
	}
	
	public byte[] getPatternMessage() {
		byte[] msg = new byte[TYPE_LEN + SIZE_LEN +
		                      length + DEL_LEN +
		                      length + DEL_LEN +
		                      length + DEL_LEN];
		int msgIndex = 0;
		
		msg[msgIndex++] = MSG_TYPE;
		for (byte b : bytize(length, SIZE_LEN))
			msg[msgIndex++] = b;
		for (byte b : piezoStackA)
			msg[msgIndex++] = b;
		msg[msgIndex++] = DEL;
		for (byte b : piezoStackB)
			msg[msgIndex++] = b;
		msg[msgIndex++] = DEL;
		for (byte b : piezoStackC)
			msg[msgIndex++] = b;
		msg[msgIndex++] = DEL;
		
		return msg;
	}
	
	private byte extractByte(int value, int index) {
		int bitShift = index * 8;
		int mask = ((1 << 8) - 1) << bitShift;
		return (byte) ((mask | value) >> bitShift);
	}
	
	private byte[] bytize(int value, int size) {
		byte[] bytes = new byte[size];
		for (int i = 0; i < size; i++)
			bytes[0] = extractByte(value, i);
		return bytes;
	}
}
